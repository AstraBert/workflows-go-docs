[
  {
    "slug": "/introduction",
    "title": "Introduction",
    "description": "This sections provides an overview of what workflows-go is, what are event-driven workflows and why Go was chosen as a language.",
    "content": "",
    "_searchMeta": {
      "cleanContent": "## What is workflows-go?\n\n`workflows-go` is a package that implements event-driven workflows in Go: it was designed to build AI applications and intelligent automation leveraging the scalability and the velocity of Go.\n\n## What are event-driven workflows?\n\nWhen explaining concepts, it is often a good idea to start from the words - in this case:\n\n- **Workflow**: A workflow can be seen as a set of steps, each of which implements a specific logic and plays a unique role: programmatically speaking, we can see the steps as methods of a class, the workflow. A workflow can be linear (all the steps get executed only once per run) or cyclic (steps can be executed more than once per run).\n- **Event:** Event is a very broad concept - you can think about it as a trigger that sets off one specific step. Ideally, you have one input event, many intermediate events and one output event.\n\nAs you can see, the very own description of event embeds the idea of *event driven workflow*: since an event is a trigger for a step, the workflow will run to completion only if the correct set of events are emitted by the steps - this also means that, by design, steps need to take an event as input and produce an event as output.\n\nSteps and events are the backbone of a workflow, but there might be other things that can help with designing the workflow itself: one of them is **statefulness**. \n\nStatefulness means that your workflow maintains an internal knowledge of what has been going on in previous steps, and maybe even in previous runs: to put it in just a few words, the workflow has an internal representation (state) of the external context.\n\n## Why Go?\n\nGo is a fascinating language, mainly for four reason: \n\n- **Essential design**: Go has only 25 keywords, as opposed to other backend programming languages like Python 3 (38 keywords), JavaScript (45) Rust (53) or C++ (74).\n- **Statical typing**: unlike Python or JS, in Go types stay static, but you don't need to declare them explicitly (you can use the walrus, `:=` , operator). This is extremely handy: if you variable changes types or doesn't behaved as expected, it gets flagged immediately at build time.\n- **Compiled**: Go is a compiled language, which means that unlike Python (where building and running are combined when you launch the script), build time and run time are separated. The build process spits out portable executables that people can just launch on their machines. Also, Go was designed so that its compile time would be drastically lower than the one of C, and it is also lower than more modern languages like Rust\n- **Ecosystem**: Go has an all-in-one tooling ecosystem, that uses one command (`go`) to do everything, from building to installing packages to testing - unlike Python or JavaScript, where we have many tools like uv, poetry and pip or pnpm, yarn and npm. \n\nTo cap it all off, Go was designed for scalable and fast large-scale applications, as well as for distributed systems and high-performance microservices: it is thus the perfect language to build the future of reliable AI automation.",
      "headings": [
        "What is workflows-go?",
        "What are event-driven workflows?",
        "Why Go?"
      ],
      "keywords": [
        "workflows",
        "event-driven",
        "ai",
        "automation",
        "go"
      ]
    }
  },
    {
    "slug": "/getting-started",
    "title": "Getting Started",
    "description": "How to install and import workflows-go in your code",
    "content": "",
    "_searchMeta": {
      "cleanContent": "## Installation\n\n> _Installing the package requires Go 1.21+_\n\nTo install the package, simply run:\n\n```bash\ngo get https://github.com/AstraBert/workflows-go\n```\n\nOr, if you want to get the package from source, clone the repository:\n\n```bash\ngit clone https://github.com/AstraBert/workflows-go\ncd workflows-go\n```\n\nAnd include the code as a base for your project's workflows!\n\n## Import Patterns\n\nAfter you installed the package, importing is very easy:\n\n```go\nimport 'github.com/AstraBert/workflows-go'\n```\n\nYou can then use the package as `workflowsgo`",
      "headings": [
        "Installation",
        "Import Patterns"
      ],
      "keywords": [
        "installation",
        "import",
        "ai",
        "automation",
        "go"
      ]
    }
  },
    {
    "slug": "/components",
    "title": "Components",
    "description": "This section explores the components of the workflows-go package",
    "content": "",
    "_searchMeta": {
      "cleanContent": "## Introduction\n\nThere are three main components of **workflows-go**:\n\n- [Workflows](./workflow/index.mdx): the main abstraction for running event-driven workflows.\n- [Events](./event/index.mdx): the triggers for workflow steps, they are designed to carry information between one step and the following one.\n- [Context](./context/index.mdx): a general-purpose storage unit, it provides long-term persinstency and statefulness to the workflow itself.\n\nFor these components, the following design patterns were chosen:\n\n- **Workflows** are designed to be stepwise, meaning that they can execute one step at a time, but they should also provide a method for running them to completion, as well as an output method.\n-  **Events** are designed to be data carriers, so they mostly behave as maps/short-lived database tables.\n- **Context** is the most database-like component: it can perform read and write operations towards a persistent storage unit (the *store*) and fetch/set operations on the stateful unit (the *state*).",
      "headings": [
        "Introduction"
      ],
      "keywords": [
        "workflows",
        "context",
        "event",
        "components",
        "guide"
      ]
    }
  },
    {
    "slug": "/workflow",
    "title": "GenericWorkflow",
    "description": "This section provides an overview of the GenericWorkflow component",
    "content": "",
    "_searchMeta": {
      "cleanContent": "## Definition\n\n**Interface**\n\n`GenericWorkflow` is an interface providing a generic implementation of\nan event-driven workflow. Every struct representing a workflow should\nimplement the `GenericWorkflow` interface.\n\nA workflow should be composed of steps, functions that take a `GenericEvent` and `GenericContext` as arguments: these steps should be in some way associated with strings representing their names.\n\n**Methods**\n\n- `TakeStep`: Allows separate execution of single steps. It executes a step by selecting it with its name and passing a `GenericEvent` and a `GenericContext` to it.\n- `Validate`: Ensures that the structure of the workflow is correct.\n- `Run`: Runs the workflow until completion. It takes an input event and an initial context, as well as three callback functions: for when an event starts being processed, for when a new event is emitted, and for the workflow output.\n- `Output`: Runs at the end of the workflow and returns the actual workflow output.",
      "headings": [
        "Definition",
        "Interface",
        "Methods",
        "Source Code"
      ],
      "keywords": [
        "GenericWorkflow",
        "event-driven",
        "interface",
        "stepwise",
        "go"
      ]
    }
  },
  {
    "slug": "/base-workflow",
    "title": "BaseWorkflow",
    "description": "This section provides an overview of the BaseWorkflow component",
    "content": "",
    "_searchMeta": {
      "cleanContent": "## Definition\n\n**Structure**\n\n`BaseWorkflow` offers a base implementation of `GenericWorkflow`.\n\n**Methods**\n\n- `Validate` checks that the steps in the workflow are not named with 'end', a keyword reserved for the name of the output step.\n- `TakeStep` allows separate execution single steps by calling them with their name.\n- `Run` runs the workflow through completion.\n- `Output` produces the output of the workflow.\n\n**Constructor**\n\n`NewBaseWorkflow` creates a new BaseWorkflow instance starting from the definition of the first step, a context instance and a map that represents steps.",
      "headings": [
        "Definition",
        "Structure",
        "Methods",
        "Constructor",
        "Source Code"
      ],
      "keywords": [
        "workflows",
        "event-driven",
        "ai",
        "automation",
        "go"
      ]
    }
  },
  {
    "slug": "/context",
    "title": "GenericContext",
    "description": "This section provides an overview of the GenericContext component",
    "content": "",
    "_searchMeta": {
      "cleanContent": "## Definition\n\n**Interface**\n`GenericContext` is the interface representing a context, i.e. a storage space that is aimed at allowing persistency and stefulness for workflow executions. All structures representing a workflow context should implement this interface.\n\n**Methods**\n\n- `StoreValue` is aimed at persistant storage of a key-value pair.\n- `GetValue` retrieves the value associated with a key within the persistent storage\n- `GetState` retrieves the in-BaseContext state of the workflow run.\n- `SetState` allows to set a new state within the BaseContext.",
      "headings": [
        "Definition",
        "Interface",
        "Methods",
        "Source Code"
      ],
      "keywords": [
        "workflows",
        "context",
        "stateful",
        "persistency",
        "go"
      ]
    }
  },
    {
    "slug": "/base-context",
    "title": "BaseContext",
    "description": "This section provides an overview of the BaseContext component",
    "content": "",
    "_searchMeta": {
      "cleanContent": "## Definition\n\n**Structure**\n\n`BaseContext` is a base implementation of the `GenericContext` implementation.\n\nIt comes with a `Store` (persistent storage), which is a map and a `State` (stateful execution) which also is a map.\n\n**Methods**\n\n- `StoreValue` stores a key-value pair in `BaseContext.Store`.\n- `GetValue` fetches the value associated with a key in `BaseContext.Store`.\n- `GetState` fetches `BaseContext.State`.\n- `SetState` assigns a value to `BaseContext.State`.\n\n**Constructor**\n\n`NewBaseContext` is a constructor that, starting from a map representing the `Store` and one representing the `State`, returns a BaseContext.",
      "headings": [
        "Definition",
        "Structure",
        "Methods",
        "Constructor",
        "Source Code"
      ],
      "keywords": [
        "workflows",
        "context",
        "stateful",
        "persistency",
        "go"
      ]
    }
  },
  {
    "slug": "/event",
    "title": "GenericEvent",
    "description": "This section provides an overview of the GenericEvent component",
    "content": "",
    "_searchMeta": {
      "cleanContent": "## Definition\n\n**Interface**\n\n`GenericEvent` is an interface that must be implemented by all structures representing events if they want to be considered as correct input/output for a workflow.\n\n**Methods**\n\n- `Get` is a function that fetches data stored within an Event, and returns that data. Data should be stored with strings as keys.",
      "headings": [
        "Definition",
        "Interface",
        "Methods",
        "Source Code"
      ],
      "keywords": [
        "workflows",
        "event-driven",
        "event",
        "data",
        "go"
      ]
    }
  },
  {
    "slug": "/base-event",
    "title": "BaseEvent",
    "description": "This section provides an overview of the BaseEvent component",
    "content": "",
    "_searchMeta": {
      "cleanContent": "## Definition\n\n**Structure**\n\n`BaseEvent` is a base implementation of the GenericEvent: it comes with `NextStep` (string) and `Data` (map) as attributes where the key information is stored.\n\n**Methods**\n\n- `Get` is a method of `BaseEvent` that fetches data stored within an `BaseEvent.Data`, and returns that data.\n\n**Constructor**\n\n`NewBaseEvent` is a constructor function that, given a string representing the name of the following step and a map containing data, returns a `BaseEvent`.",
      "headings": [
        "Definition",
        "Structure",
        "Methods",
        "Constructor",
        "Source Code"
      ],
      "keywords": [
        "workflows",
        "event-driven",
        "event",
        "data",
        "go"
      ]
    }
  }
]